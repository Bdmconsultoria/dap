import streamlit as st
import pandas as pd
from datetime import datetime
import os
import uuid
import numpy as np

# ==============================
# Configura√ß√µes iniciais
# ==============================
st.set_page_config(page_title="Controle de Atividades (CSV Local)", layout="wide")

# Arquivo para salvar usu√°rios e atividades
USERS_FILE = "usuarios.csv"
ATIVIDADES_FILE = "atividades.csv"

# ==============================
# Fun√ß√µes de inicializa√ß√£o e carregamento
# ==============================

def initialize_files():
    """Inicializa os arquivos CSV se n√£o existirem."""
    if not os.path.exists(USERS_FILE):
        df_users = pd.DataFrame(columns=["usuario", "senha", "admin"])
        df_users.to_csv(USERS_FILE, index=False)
        # Adiciona um usu√°rio admin padr√£o para a primeira inicializa√ß√£o
        salvar_usuario_csv('admin', '123', True)
    
    if not os.path.exists(ATIVIDADES_FILE):
        # Adiciona a coluna 'id' para rastrear e permitir a exclus√£o
        df_activities = pd.DataFrame(columns=["id", "usuario", "data", "mes", "ano", "descricao", "projeto", "porcentagem", "observacao"])
        df_activities.to_csv(ATIVIDADES_FILE, index=False)

@st.cache_data(show_spinner=False)
def load_data():
    """Carrega os dados dos arquivos CSV."""
    try:
        usuarios_df = pd.read_csv(USERS_FILE)
        atividades_df = pd.read_csv(ATIVIDADES_FILE)
        # Garante que 'id' √© um GUID para exclus√£o
        atividades_df['id'] = atividades_df['id'].astype(str)
    except Exception as e:
        st.error(f"Erro ao carregar dados CSV. Certifique-se de que os arquivos n√£o est√£o corrompidos. {e}")
        usuarios_df = pd.DataFrame(columns=["usuario", "senha", "admin"])
        atividades_df = pd.DataFrame(columns=["id", "usuario", "data", "mes", "ano", "descricao", "projeto", "porcentagem", "observacao"])
    return usuarios_df, atividades_df

# Inicializa arquivos na primeira execu√ß√£o
initialize_files()

# Carrega DataFrames (usados globalmente na sess√£o)
usuarios_df, atividades_df = load_data()


# ==============================
# Fun√ß√µes auxiliares (CSV WRITE/VALIDATE)
# ==============================
def salvar_usuario_csv(usuario, senha, admin=False):
    """Salva um novo usu√°rio no CSV."""
    global usuarios_df
    
    # Verifica se o usu√°rio j√° existe
    if usuario in usuarios_df["usuario"].values:
        return False
        
    novo = pd.DataFrame([[usuario, senha, admin]], columns=["usuario", "senha", "admin"])
    usuarios_df = pd.concat([usuarios_df, novo], ignore_index=True)
    usuarios_df.to_csv(USERS_FILE, index=False)
    # Limpa o cache para o pr√≥ximo carregamento
    load_data.clear()
    return True

def validar_login(usuario, senha):
    """Valida o login."""
    if usuario in usuarios_df["usuario"].values:
        row = usuarios_df.loc[usuarios_df["usuario"] == usuario].iloc[0]
        # Garante que 'admin' √© tratado como booleano
        is_admin = str(row.get("admin", False)).lower() in ('true', '1', 'True')
        if row["senha"] == senha:
            return True, is_admin
    return False, False

def salvar_atividade_csv(usuario, data, descricao, projeto, porcentagem, observacao):
    """Salva uma nova atividade no CSV."""
    global atividades_df
    
    mes = data.month
    ano = data.year
    
    # Gera um ID √∫nico para a atividade
    new_id = str(uuid.uuid4())
    
    nova = pd.DataFrame(
        [[new_id, usuario, data.strftime("%d/%m/%Y"), mes, ano, descricao, projeto, porcentagem, observacao]],
        columns=["id", "usuario", "data", "mes", "ano", "descricao", "projeto", "porcentagem", "observacao"]
    )
    atividades_df = pd.concat([atividades_df, nova], ignore_index=True)
    atividades_df.to_csv(ATIVIDADES_FILE, index=False)
    # Limpa o cache para o pr√≥ximo carregamento
    load_data.clear()

def deletar_atividade_csv(activity_id):
    """Deleta uma atividade do CSV usando o ID."""
    global atividades_df
    
    # Filtra o DataFrame para remover a linha com o ID correspondente
    # Garante que a coluna 'id' no DataFrame e o activity_id de entrada s√£o strings
    atividades_df = atividades_df[atividades_df['id'].astype(str) != str(activity_id)]
    
    # Salva o DataFrame modificado de volta no arquivo
    atividades_df.to_csv(ATIVIDADES_FILE, index=False)
    # Limpa o cache para o pr√≥ximo carregamento
    load_data.clear()


# ==============================
# Listas fixas
# ==============================
DESCRICOES = [
    "1.001 - Gest√£o", "1.002 - Geral", "1.003 - Conselho", "1.004 - Treinamento e Desenvolvimento",
    "2.001 - Gest√£o do administrativo", "2.002 - Administrativa", "2.003 - Jur√≠dica", "2.004 - Financeira",
    "2.006 - Fiscal", "2.007 - Infraestrutura TI", "2.008 - Treinamento interno", "2.011 - An√°lise de dados",
    "2.012 - Log√≠stica de viagens", "2.013 - Presta√ß√£o de contas",
    "3.001 - Prospec√ß√£o de oportunidades", "3.002 - Prospec√ß√£o de temas", "3.003 - Administra√ß√£o comercial",
    "3.004 - Marketing Digital", "3.005 - Materiais de apoio", "3.006 - Grupos de Estudo", "3.007 - Elabora√ß√£o de POC/Piloto",
    "3.008 - Elabora√ß√£o e apresenta√ß√£o de proposta", "3.009 - Acompanhamento de proposta", "3.010 - Reuni√£o de acompanhamento de funil",
    "3.011 - Planejamento Estrat√©gico/Comercial", "3.012 - Sucesso do Cliente", "3.013 - Participa√ß√£o em eventos",
    "4.001 - Planejamento de projeto", "4.002 - Gest√£o de projeto", "4.003 - Reuni√µes internas de trabalho",
    "4.004 - Reuni√µes externas de trabalho", "4.005 - Pesquisa", "4.006 - Especifica√ß√£o de software",
    "4.007 - Desenvolvimento de software/rotinas", "4.008 - Coleta e prepara√ß√£o de dados", "4.009 - Elabora√ß√£o de estudos e modelos",
    "4.010 - Confec√ß√£o de relat√≥rios t√©cnicos", "4.011 - Confec√ß√£o de apresenta√ß√µes t√©cnicas", "4.012 - Confec√ß√£o de artigos t√©cnicos",
    "4.013 - Difus√£o de resultados", "4.014 - Elabora√ß√£o de documenta√ß√£o final", "4.015 - Finaliza√ß√£o do projeto",
    "5.001 - Gest√£o de desenvolvimento", "5.002 - Planejamento de projeto", "5.003 - Gest√£o de projeto",
    "5.004 - Reuni√µes internas de trabalho", "5.005 - Reuni√µes externa de trabalho", "5.006 - Pesquisa",
    "5.007 - Coleta e prepara√ß√£o de dados", "5.008 - Modelagem", "5.009 - An√°lise de tarefa", "5.010 - Especifica√ß√£o de tarefa",
    "5.011 - Corre√ß√£o de bug", "5.012 - Desenvolvimento de melhorias", "5.013 - Desenvolvimento de novas funcionalidades",
    "5.014 - Desenvolvimento de integra√ß√µes", "5.015 - Treinamento interno", "5.016 - Documenta√ß√£o",
    "5.017 - Atividades gerenciais", "5.018 - Estudos"
]

PROJETOS = [
    "101-0 (Interno) Diretoria Executiva", "102-0 (Interno) Diretoria Administrativa",
    "103-0 (Interno) Diretoria de Engenharia", "104-0 (Interno) Diretoria de Neg√≥cios",
    "105-0 (Interno) Diretoria de Produtos", "106-0 (Interno) Diretoria de Tecnologia",
    "107-0 (Interno) Departamento Administrativo", "108-0 (Interno) Departamento de Gente e Cultura",
    "109-0 (Interno) Departamento de Infraestrutura", "110-0 (Interno) Departamento de Marketing",
    "111-0 (Interno) Departamento de Opera√ß√£o", "112-0 (Interno) Departamento de Sucesso do Cliente",
    "113-0 (Interno) Produto ARIES", "114-0 (Interno) Produto ActionWise",
    "115-0 (Interno) Produto Carga Base"
]

# ==============================
# Login e Navega√ß√£o
# ==============================
if "usuario" not in st.session_state:
    st.session_state["usuario"] = None
    st.session_state["admin"] = False

if st.session_state["usuario"] is None:
    # -----------------------------
    # Tela de Login
    # -----------------------------
    st.title("üîê Login")
    st.info("Dados salvos localmente em arquivos CSV. Usu√°rio padr√£o: **admin** / **123**.")
    usuario_input = st.text_input("Usu√°rio")
    senha_input = st.text_input("Senha", type="password")
    
    if st.button("Entrar"):
        ok, admin = validar_login(usuario_input, senha_input)
        if ok:
            st.session_state["usuario"] = usuario_input
            st.session_state["admin"] = admin
            st.rerun()
        else:
            st.error("Usu√°rio ou senha incorretos")
else:
    # -----------------------------
    # Menu Principal
    # -----------------------------
    st.sidebar.write(f"üë§ Logado como: {st.session_state['usuario']}")
    
    if st.sidebar.button("Sair"):
        st.session_state["usuario"] = None
        st.session_state["admin"] = False
        st.rerun()

    abas = ["Lan√ßar Atividade", "Minhas Atividades", "Valida√ß√£o"]
    
    if st.session_state["admin"]:
        abas += ["Gerenciar Usu√°rios", "Consolidado"]

    aba = st.sidebar.radio("Menu", abas)

    # -----------------------------
    # Gerenciar Usu√°rios (Admin)
    # -----------------------------
    if aba == "Gerenciar Usu√°rios" and st.session_state["admin"]:
        st.header("üë• Gerenciar Usu√°rios")
        
        with st.form("form_novo_usuario"):
            novo_usuario = st.text_input("Novo usu√°rio")
            nova_senha = st.text_input("Senha", type="password")
            admin_check = st.checkbox("Administrador")
            if st.form_submit_button("Adicionar Usu√°rio"):
                if salvar_usuario_csv(novo_usuario, nova_senha, admin_check):
                    st.success("Usu√°rio adicionado!")
                else:
                    st.warning("Usu√°rio j√° existe.")
                st.rerun() 

        st.subheader("Usu√°rios cadastrados")
        st.dataframe(usuarios_df, hide_index=True)

    # -----------------------------
    # Lan√ßar Atividade
    # -----------------------------
    elif aba == "Lan√ßar Atividade":
        st.header("üìù Lan√ßamento de Atividade (DAP Completa)")
        with st.form("form_lancamento"):
            data_input = st.date_input("Data", datetime.today())
            descricao = st.selectbox("Descri√ß√£o da Atividade (C√≥digo - T√≠tulo)", DESCRICOES)
            projeto = st.selectbox("Projeto/Aloca√ß√£o", PROJETOS)
            
            porcentagem = st.slider("Porcentagem de Dedica√ß√£o do Dia (0 a 100)", 0, 100, 100)
            
            observacao = st.text_area("Observa√ß√£o / Detalhamento da Atividade")
            if st.form_submit_button("Salvar Atividade"):
                salvar_atividade_csv(st.session_state["usuario"], data_input, descricao, projeto, porcentagem, observacao)
                st.success("Atividade salva!")
                st.rerun() 


    # -----------------------------
    # Minhas Atividades (Com Exclus√£o)
    # -----------------------------
    elif aba == "Minhas Atividades":
        st.header("üìä Minhas Atividades Lan√ßadas")
        
        minhas = atividades_df[atividades_df["usuario"] == st.session_state["usuario"]].copy()

        if minhas.empty:
            st.info("Voc√™ ainda n√£o lan√ßou nenhuma atividade.")
        else:
            # Seleciona e renomeia as colunas para melhor visualiza√ß√£o
            minhas = minhas.sort_values(by='data', ascending=False)
            
            st.markdown("---")
            st.subheader("Atividades para Exclus√£o:")
            st.warning("Para apagar, clique no bot√£o 'üóëÔ∏è Apagar' ao lado da atividade.")

            # Itera sobre as atividades para criar bot√µes de exclus√£o
            for index, row in minhas.iterrows():
                cols = st.columns([0.1, 0.2, 0.4, 0.15, 0.15])
                
                # Exibe a data, descri√ß√£o, projeto e porcentagem em colunas
                cols[0].write(row['data'])
                cols[1].write(row['descricao'].split(" - ")[-1]) # Exibe s√≥ a descri√ß√£o
                cols[2].write(row['projeto'])
                cols[3].write(f"{row['porcentagem']}%")
                
                # Bot√£o de Exclus√£o
                delete_button_key = f"delete_{row['id']}"
                if cols[4].button("üóëÔ∏è Apagar", key=delete_button_key):
                    deletar_atividade_csv(row['id'])
                    st.success(f"Atividade de {row['data']} apagada.")
                    st.rerun() # Recarrega a p√°gina para atualizar a lista
                
                # Expander para Observa√ß√£o
                with st.expander("Ver Observa√ß√£o Completa", expanded=False):
                    st.text(row['observacao'])
                
                st.markdown("---")

            # Bot√£o de exporta√ß√£o no final da lista
            st.download_button(
                "üì• Exportar Minhas Atividades CSV", 
                minhas.to_csv(index=False).encode('utf-8'), 
                "minhas_atividades.csv",
                mime="text/csv"
            )

    # -----------------------------
    # Consolidado (Admin)
    # -----------------------------
    elif aba == "Consolidado" and st.session_state["admin"]:
        st.header("üìë Consolidado Geral de Atividades")
        df_consolidado = atividades_df.drop(columns=['id'], errors='ignore')

        if df_consolidado.empty:
            st.info("Ainda n√£o h√° atividades lan√ßadas na base de dados.")
        else:
            st.dataframe(df_consolidado, hide_index=True)
            st.download_button(
                "üì• Exportar Consolidado CSV", 
                df_consolidado.to_csv(index=False).encode('utf-8'), 
                "consolidado_geral.csv",
                mime="text/csv"
            )

    # -----------------------------
    # Valida√ß√£o (Acess√≠vel a Todos com Filtro de Vis√£o)
    # -----------------------------
    elif aba == "Valida√ß√£o":
        
        df_base = atividades_df.copy()
        
        if df_base.empty:
            st.warning("N√£o h√° atividades lan√ßadas para realizar a valida√ß√£o.")
            st.stop() 

        # 1. Definir o DataFrame a ser validado (Admin v√™ tudo, comum v√™ apenas o seu)
        if st.session_state["admin"]:
            st.header("‚úÖ Valida√ß√£o de Porcentagem Mensal por Usu√°rio (Vis√£o Global)")
            st.info("Vis√£o Administrativa: Mostra a **soma da porcentagem de atividades lan√ßadas** por todos os usu√°rios, agrupadas por M√™s e Ano. O ideal √© que a dedica√ß√£o total do colaborador seja de **100%** em cada m√™s.")
            df_to_validate = df_base
            nome_export = "validacao_mensal_global.csv"
        else:
            st.header(f"‚úÖ Valida√ß√£o de Suas Horas Mensais ({st.session_state['usuario']})")
            st.info("Esta tabela mostra a **soma da porcentagem de atividades lan√ßadas** em seu nome, agrupadas por M√™s e Ano. O ideal √© que a dedica√ß√£o total seja de **100%** em cada m√™s.")
            df_to_validate = df_base[df_base['usuario'] == st.session_state["usuario"]]
            nome_export = "validacao_mensal_pessoal.csv"
            
            if df_to_validate.empty:
                st.warning("Voc√™ ainda n√£o lan√ßou atividades suficientes para esta valida√ß√£o.")
                st.stop() # Interrompe a execu√ß√£o para usu√°rios sem dados

        # 2. Preparar e agrupar os dados
        validacao_df = df_to_validate[['usuario', 'ano', 'mes', 'porcentagem']].copy()
        validacao_df['porcentagem'] = pd.to_numeric(validacao_df['porcentagem'], errors='coerce').fillna(0)


        # 3. Calcular o total de porcentagem por usu√°rio e m√™s
        total_por_mes = validacao_df.groupby(['usuario', 'ano', 'mes'])['porcentagem'].sum().reset_index()
        total_por_mes.rename(columns={'porcentagem': 'Total_Porcentagem_Lancada'}, inplace=True)

        # 4. Formatar para exibi√ß√£o
        total_por_mes['mes_ano'] = total_por_mes['mes'].astype(str).str.zfill(2) + '/' + total_por_mes['ano'].astype(str)
        total_por_mes = total_por_mes.sort_values(by=['ano', 'mes', 'usuario'], ascending=[False, False, True])
        
        
        # 5. Configurar a tabela de exibi√ß√£o
        if st.session_state["admin"]:
            tabela_final = total_por_mes[['usuario', 'mes_ano', 'Total_Porcentagem_Lancada']]
            tabela_final.columns = ['Usu√°rio', 'M√™s/Ano', 'Porcentagem Lan√ßada']
        else:
            tabela_final = total_por_mes[['mes_ano', 'Total_Porcentagem_Lancada']]
            tabela_final.columns = ['M√™s/Ano', 'Porcentagem Lan√ßada']


        # 6. Exibir o resultado com ProgressColumn para visualiza√ß√£o
        column_config_dict = {
            "Porcentagem Lan√ßada": st.column_config.ProgressColumn(
                "Porcentagem Lan√ßada",
                help="Soma de todas as porcentagens de atividades no m√™s. O valor de refer√™ncia √© 100%.",
                format="%d%%",
                min_value=0,
                max_value=100,
                width="medium"
            ),
            "M√™s/Ano": "M√™s/Ano"
        }
        
        if st.session_state["admin"]:
             column_config_dict["Usu√°rio"] = "Usu√°rio"

        st.dataframe(
            tabela_final,
            hide_index=True,
            column_config=column_config_dict
        )

        st.download_button(
            "üì• Exportar Valida√ß√£o Mensal CSV",
            total_por_mes.to_csv(index=False).encode('utf-8'),
            nome_export,
            mime="text/csv"
        )
