import streamlit as st
import pandas as pd
from datetime import datetime
import psycopg2
from psycopg2 import sql

# ==============================
# 1. Configura√ß√µes do Banco de Dados PostgreSQL (Supabase)
# O host foi revertido para o NOME DE DOM√çNIO padr√£o.
# Se o erro de conex√£o persistir, verifique a configura√ß√£o de rede/firewall do seu projeto Supabase.
# ==============================
DB_PARAMS = {
    # Usando o nome de dom√≠nio para a conex√£o em nuvem.
    "host": "db.urytjzupeorabraufjef.supabase.co", 
    "port": 5432,
    "database": "postgres",
    "user": "postgres",
    "password": "Bp@20081993",
    # Supabase requer SSL para conex√µes externas.
    "sslmode": "require" 
}

# ==============================
# Configura√ß√µes iniciais do Streamlit
# ==============================
st.set_page_config(page_title="Controle de Atividades (PostgreSQL)", layout="wide")

# ==============================
# 2. Fun√ß√µes de Conex√£o e Setup do DB
# ==============================

def get_db_connection():
    """Tenta estabelecer a conex√£o com o banco de dados PostgreSQL."""
    try:
        conn = psycopg2.connect(**DB_PARAMS)
        return conn
    except Exception as e:
        # st.error √© usado aqui para mostrar o erro de forma clara no app
        st.error(f"‚ùå Erro ao conectar ao banco de dados. Verifique suas credenciais e a disponibilidade do servi√ßo: {e}")
        return None

def setup_db():
    """Cria as tabelas 'usuarios' e 'atividades' se n√£o existirem."""
    conn = get_db_connection()
    if conn is None: return

    try:
        with conn.cursor() as cursor:
            # Tabela de Usu√°rios (necess√°ria para sistema multiusu√°rio)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS usuarios (
                    usuario VARCHAR(50) PRIMARY KEY,
                    senha VARCHAR(50) NOT NULL,
                    admin BOOLEAN DEFAULT FALSE
                );
            """)

            # Tabela de Atividades
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS atividades (
                    id SERIAL PRIMARY KEY,
                    usuario VARCHAR(50) REFERENCES usuarios(usuario),
                    data DATE NOT NULL,
                    mes INTEGER NOT NULL,
                    ano INTEGER NOT NULL,
                    descricao VARCHAR(255) NOT NULL,
                    projeto VARCHAR(255) NOT NULL,
                    porcentagem INTEGER NOT NULL,
                    observacao TEXT
                );
            """)
            conn.commit()
    except Exception as e:
        st.error(f"Erro na cria√ß√£o/verifica√ß√£o das tabelas: {e}")
    finally:
        conn.close()

# Executa o setup do DB ao iniciar o script
setup_db()


# ==============================
# 3. Fun√ß√µes de Carregamento de Dados (Cache)
# ==============================

# Usa st.cache_data para carregar dados do DB e evitar recargas desnecess√°rias
# O cache ser√° invalidado quando 'reload_flag' mudar (ap√≥s uma inser√ß√£o ou update)
@st.cache_data(show_spinner="üîÑ Carregando dados do PostgreSQL...")
def load_data_from_db(reload_flag):
    """Carrega dados das tabelas 'usuarios' e 'atividades' para DataFrames."""
    conn = get_db_connection()
    if conn is None:
        # Retorna DataFrames vazios em caso de falha na conex√£o
        return pd.DataFrame(), pd.DataFrame()

    try:
        # Carrega usu√°rios
        usuarios_query = "SELECT usuario, senha, admin FROM usuarios;"
        usuarios_df = pd.read_sql(usuarios_query, conn)

        # Carrega atividades
        atividades_query = "SELECT id, usuario, data, mes, ano, descricao, projeto, porcentagem, observacao FROM atividades ORDER BY data DESC;"
        atividades_df = pd.read_sql(atividades_query, conn)

        return usuarios_df, atividades_df
    except Exception as e:
        st.error(f"Erro ao carregar dados do DB: {e}")
        return pd.DataFrame(), pd.DataFrame()
    finally:
        conn.close()

# Inicializa o flag de recarga na sess√£o
if "reload_flag" not in st.session_state:
    st.session_state.reload_flag = 0

# Carrega dados do PostgreSQL (agora usando a fun√ß√£o com cache)
usuarios_df, atividades_df = load_data_from_db(st.session_state.reload_flag)

# ==============================
# 4. Fun√ß√µes auxiliares (CRUD)
# ==============================

def salvar_usuario(usuario, senha, admin=False):
    """Insere um novo usu√°rio no DB. Retorna True em caso de sucesso."""
    conn = get_db_connection()
    if conn is None: return False
    try:
        with conn.cursor() as cursor:
            # Usa INSERT INTO ON CONFLICT DO NOTHING para evitar duplicatas e erro
            cursor.execute(
                """
                INSERT INTO usuarios (usuario, senha, admin) 
                VALUES (%s, %s, %s) 
                ON CONFLICT (usuario) 
                DO NOTHING;
                """,
                (usuario, senha, admin)
            )
            conn.commit()
            return True
    except Exception as e:
        st.error(f"Erro ao salvar usu√°rio no DB: {e}")
        return False
    finally:
        conn.close()

def validar_login(usuario, senha):
    """Verifica se o usu√°rio e senha s√£o v√°lidos no DB. Retorna (True/False, admin_status)."""
    conn = get_db_connection()
    if conn is None: return False, False
    try:
        with conn.cursor() as cursor:
            cursor.execute(
                "SELECT senha, admin FROM usuarios WHERE usuario = %s;",
                (usuario,)
            )
            result = cursor.fetchone()
            
            if result and result[0] == senha:
                return True, result[1] # result[0] √© a senha, result[1] √© o status admin
            return False, False
    except Exception as e:
        st.error(f"Erro ao validar login no DB: {e}")
        return False, False
    finally:
        conn.close()

def salvar_atividade(usuario, data, descricao, projeto, porcentagem, observacao):
    """Insere uma nova atividade no DB. Retorna True em caso de sucesso."""
    conn = get_db_connection()
    if conn is None: return False
    try:
        with conn.cursor() as cursor:
            mes = data.month
            ano = data.year
            
            cursor.execute(
                """
                INSERT INTO atividades (usuario, data, mes, ano, descricao, projeto, porcentagem, observacao) 
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s);
                """,
                (usuario, data, mes, ano, descricao, projeto, porcentagem, observacao)
            )
            conn.commit()
            return True
    except Exception as e:
        st.error(f"Erro ao salvar atividade no DB: {e}")
        return False
    finally:
        conn.close()

# ==============================
# Listas fixas
# ==============================
# Manuten√ß√£o das listas fixas em portugu√™s
DESCRICOES = [
    "1.001 - Gest√£o", "1.002 - Geral", "1.003 - Conselho", "1.004 - Treinamento e Desenvolvimento",
    "2.001 - Gest√£o do administrativo", "2.002 - Administrativa", "2.003 - Jur√≠dica", "2.004 - Financeira",
    "2.006 - Fiscal", "2.007 - Infraestrutura TI", "2.008 - Treinamento interno", "2.011 - An√°lise de dados",
    "2.012 - Log√≠stica de viagens", "2.013 - Presta√ß√£o de contas", "3.001 - Prospec√ß√£o de oportunidades",
    "3.002 - Prospec√ß√£o de temas", "3.003 - Administra√ß√£o comercial", "3.004 - Marketing Digital",
    "3.005 - Materiais de apoio", "3.006 - Grupos de Estudo", "3.007 - Elabora√ß√£o de POC/Piloto",
    "3.008 - Elabora√ß√£o e apresenta√ß√£o de proposta", "3.009 - Acompanhamento de proposta",
    "3.010 - Reuni√£o de acompanhamento de funil", "3.011 - Planejamento Estrat√©gico/Comercial",
    "3.012 - Sucesso do Cliente", "3.013 - Participa√ß√£o em eventos", "4.001 - Planejamento de projeto",
    "4.002 - Gest√£o de projeto", "4.003 - Reuni√µes internas de trabalho", "4.004 - Reuni√µes externas de trabalho",
    "4.005 - Pesquisa", "4.006 - Especifica√ß√£o de software", "4.007 - Desenvolvimento de software/rotinas",
    "4.008 - Coleta e prepara√ß√£o de dados", "4.009 - Elabora√ß√£o de estudos e modelos",
    "4.010 - Confec√ß√£o de relat√≥rios t√©cnicos", "4.011 - Confec√ß√£o de apresenta√ß√µes t√©cnicas",
    "4.012 - Confec√ß√£o de artigos t√©cnicos", "4.013 - Difus√£o de resultados", "4.014 - Elabora√ß√£o de documenta√ß√£o final",
    "4.015 - Finaliza√ß√£o do projeto", "5.001 - Gest√£o de desenvolvimento", "5.002 - Planejamento de projeto",
    "5.003 - Gest√£o de projeto", "5.004 - Reuni√µes internas de trabalho", "5.005 - Reuni√µes externa de trabalho",
    "5.006 - Pesquisa", "5.007 - Coleta e prepara√ß√£o de dados", "5.008 - Modelagem", "5.009 - An√°lise de tarefa",
    "5.010 - Especifica√ß√£o de tarefa", "5.011 - Corre√ß√£o de bug", "5.012 - Desenvolvimento de melhorias",
    "5.013 - Desenvolvimento de novas funcionalidades", "5.014 - Desenvolvimento de integra√ß√µes",
    "5.015 - Treinamento interno", "5.016 - Documenta√ß√£o", "5.017 - Atividades gerenciais", "5.018 - Estudos"
]

PROJETOS = [
    "101-0 (Interno) Diretoria Executiva", "102-0 (Interno) Diretoria Administrativa",
    "103-0 (Interno) Diretoria de Engenharia", "104-0 (Interno) Diretoria de Neg√≥cios",
    "105-0 (Interno) Diretoria de Produtos", "106-0 (Interno) Diretoria de Tecnologia",
    "107-0 (Interno) Departamento Administrativo", "108-0 (Interno) Departamento de Gente e Cultura",
    "109-0 (Interno) Departamento de Infraestrutura", "110-0 (Interno) Departamento de Marketing",
    "111-0 (Interno) Departamento de Opera√ß√£o", "112-0 (Interno) Departamento de Sucesso do Cliente",
    "113-0 (Interno) Produto ARIES", "114-0 (Interno) Produto ActionWise", "115-0 (Interno) Produto Carga Base"
]

# ==============================
# 5. Interface Streamlit
# ==============================
if "usuario" not in st.session_state:
    st.session_state["usuario"] = None
    st.session_state["admin"] = False

if st.session_state["usuario"] is None:
    # --- Tela de Login ---
    st.title("üîê Login (PostgreSQL)")
    usuario = st.text_input("Usu√°rio")
    senha = st.text_input("Senha", type="password")
    
    if st.button("Entrar"):
        # Garante que os DataFrames estejam frescos para validar o login
        usuarios_df, atividades_df = load_data_from_db(st.session_state.reload_flag)
        
        ok, admin = validar_login(usuario, senha)
        if ok:
            st.session_state["usuario"] = usuario
            st.session_state["admin"] = admin
            st.rerun()
        else:
            st.error("Usu√°rio ou senha incorretos")
else:
    # --- App Logado ---
    st.sidebar.markdown(f"**Usu√°rio:** {st.session_state['usuario']}")
    
    if st.sidebar.button("Sair"):
        st.session_state["usuario"] = None
        st.session_state["admin"] = False
        st.session_state.reload_flag += 1 # Opcional: for√ßa recarga ao sair
        st.rerun()

    abas = ["Lan√ßar Atividade", "Minhas Atividades"]
    if st.session_state["admin"]:
        abas += ["Gerenciar Usu√°rios", "Consolidado"]

    aba = st.sidebar.radio("Menu", abas)
    st.sidebar.divider()

    # --- Gerenciar Usu√°rios (Admin) ---
    if aba == "Gerenciar Usu√°rios" and st.session_state["admin"]:
        st.header("üë• Gerenciar Usu√°rios")
        
        with st.form("form_add_user"):
            st.subheader("Adicionar Novo Usu√°rio")
            col1, col2, col3 = st.columns([3, 3, 1])
            novo_usuario = col1.text_input("Nome de Usu√°rio", key="new_user")
            nova_senha = col2.text_input("Senha", type="password", key="new_pass")
            admin_check = col3.checkbox("Admin", key="new_admin")
            submitted = st.form_submit_button("Adicionar Usu√°rio")

            if submitted:
                if salvar_usuario(novo_usuario, nova_senha, admin_check):
                    st.success("Usu√°rio adicionado com sucesso ao PostgreSQL!")
                    # Incrementa o flag para for√ßar a recarga dos dados
                    st.session_state.reload_flag += 1
                    st.rerun()
                else:
                    st.error("Falha ao adicionar usu√°rio.")

        st.subheader("Usu√°rios Cadastrados")
        st.dataframe(usuarios_df.drop(columns=['senha']), use_container_width=True)

    # --- Lan√ßar Atividade ---
    elif aba == "Lan√ßar Atividade":
        st.header("üìù Lan√ßamento de Atividade (DAP)")
        
        with st.form("form_atividade"):
            data = st.date_input("Data da Atividade", datetime.today())
            descricao = st.selectbox("Descri√ß√£o da Atividade (C√≥digo)", DESCRICOES)
            projeto = st.selectbox("Projeto", PROJETOS)
            porcentagem = st.slider("Porcentagem de Dedica√ß√£o", 0, 100, 100)
            observacao = st.text_area("Observa√ß√£o / Detalhamento da Tarefa (Obrigat√≥rio)", height=150)
            
            submitted = st.form_submit_button("Salvar Atividade no DB")
            
            if submitted:
                if not observacao.strip():
                    st.error("A Observa√ß√£o/Detalhamento √© obrigat√≥ria.")
                else:
                    if salvar_atividade(st.session_state["usuario"], data, descricao, projeto, porcentagem, observacao):
                        st.success("Atividade salva com sucesso no PostgreSQL!")
                        # Incrementa o flag para for√ßar a recarga dos dados
                        st.session_state.reload_flag += 1
                        st.rerun()
                    else:
                        st.error("Falha ao salvar atividade.")

    # --- Minhas Atividades ---
    elif aba == "Minhas Atividades":
        st.header("üìä Minhas Atividades Registradas")
        
        minhas = atividades_df[atividades_df["usuario"] == st.session_state["usuario"]]
        
        if minhas.empty:
            st.info("Nenhuma atividade encontrada para o seu usu√°rio.")
        else:
            # Seleciona colunas relevantes para exibi√ß√£o
            display_df = minhas[['data', 'descricao', 'projeto', 'porcentagem', 'observacao']]
            st.dataframe(display_df, use_container_width=True)
            
            st.download_button(
                "üì• Exportar CSV", 
                minhas.to_csv(index=False).encode('utf-8'), 
                f"atividades_{st.session_state['usuario']}.csv",
                mime="text/csv"
            )

    # --- Consolidado (Admin) ---
    elif aba == "Consolidado" and st.session_state["admin"]:
        st.header("üìë Consolidado Geral de Atividades")
        
        if atividades_df.empty:
            st.info("Nenhum registro de atividade no banco de dados.")
        else:
            st.dataframe(atividades_df.drop(columns=['id']), use_container_width=True)
            
            st.download_button(
                "üì• Exportar Consolidado CSV", 
                atividades_df.to_csv(index=False).encode('utf-8'), 
                "consolidado_geral.csv",
                mime="text/csv"
            )

                mime="text/csv"
            )

