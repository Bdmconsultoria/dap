import streamlit as st
import pandas as pd
from datetime import datetime
import psycopg2
import socket

# ==============================
# 0. For√ßar IPv4 (Ignorar IPv6)
# ==============================
original_getaddrinfo = socket.getaddrinfo

def getaddrinfo_ipv4(host, port, *args, **kwargs):
    # Retorna apenas endere√ßos IPv4
    infos = original_getaddrinfo(host, port, *args, **kwargs)
    return [i for i in infos if i[0] == socket.AF_INET]

socket.getaddrinfo = getaddrinfo_ipv4

# ==============================
# 1. Configura√ß√µes do Banco de Dados PostgreSQL (Supabase)
# ==============================
DB_PARAMS = {
    "host": "db.urytjzupeorabraufjef.supabase.co",
    "port": 5432,
    "database": "postgres",
    "user": "postgres",
    "password": "Bp@20081993",
    "sslmode": "require"
}

# ==============================
# 2. Conex√£o PostgreSQL com cache
# ==============================
@st.cache_resource
def get_db_connection():
    """Conex√£o PostgreSQL √∫nica por sess√£o."""
    try:
        conn = psycopg2.connect(**DB_PARAMS)
        return conn
    except Exception as e:
        st.error(f"‚ùå Erro ao conectar ao banco de dados: {e}")
        return None

# ==============================
# 3. Setup do banco
# ==============================
def setup_db():
    conn = get_db_connection()
    if conn is None: st.stop()
    try:
        with conn.cursor() as cursor:
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS usuarios (
                    usuario VARCHAR(50) PRIMARY KEY,
                    senha VARCHAR(50) NOT NULL,
                    admin BOOLEAN DEFAULT FALSE
                );
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS atividades (
                    id SERIAL PRIMARY KEY,
                    usuario VARCHAR(50) REFERENCES usuarios(usuario),
                    data DATE NOT NULL,
                    mes INTEGER NOT NULL,
                    ano INTEGER NOT NULL,
                    descricao VARCHAR(255) NOT NULL,
                    projeto VARCHAR(255) NOT NULL,
                    porcentagem INTEGER NOT NULL,
                    observacao TEXT
                );
            """)
            conn.commit()
    except Exception as e:
        st.error(f"Erro ao criar/verificar tabelas: {e}")

setup_db()

# ==============================
# 4. Fun√ß√µes CRUD
# ==============================
def salvar_usuario(usuario, senha, admin=False):
    conn = get_db_connection()
    if conn is None: return False
    try:
        with conn.cursor() as cursor:
            cursor.execute("""
                INSERT INTO usuarios (usuario, senha, admin)
                VALUES (%s, %s, %s)
                ON CONFLICT (usuario) DO NOTHING;
            """, (usuario, senha, admin))
            conn.commit()
            return True
    except Exception as e:
        st.error(f"Erro ao salvar usu√°rio: {e}")
        return False

def validar_login(usuario, senha):
    conn = get_db_connection()
    if conn is None: return False, False
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT senha, admin FROM usuarios WHERE usuario = %s;", (usuario,))
            result = cursor.fetchone()
            if result and result[0] == senha:
                return True, result[1]
            return False, False
    except Exception as e:
        st.error(f"Erro ao validar login: {e}")
        return False, False

def salvar_atividade(usuario, data, descricao, projeto, porcentagem, observacao):
    conn = get_db_connection()
    if conn is None: return False
    try:
        with conn.cursor() as cursor:
            mes, ano = data.month, data.year
            cursor.execute("""
                INSERT INTO atividades (usuario, data, mes, ano, descricao, projeto, porcentagem, observacao)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s);
            """, (usuario, data, mes, ano, descricao, projeto, porcentagem, observacao))
            conn.commit()
            return True
    except Exception as e:
        st.error(f"Erro ao salvar atividade: {e}")
        return False

@st.cache_data(show_spinner="üîÑ Carregando dados do PostgreSQL...")
def load_data_from_db(reload_flag):
    conn = get_db_connection()
    if conn is None:
        return pd.DataFrame(), pd.DataFrame()
    try:
        usuarios_df = pd.read_sql("SELECT usuario, senha, admin FROM usuarios;", conn)
        atividades_df = pd.read_sql("SELECT id, usuario, data, mes, ano, descricao, projeto, porcentagem, observacao FROM atividades ORDER BY data DESC;", conn)
        return usuarios_df, atividades_df
    except Exception as e:
        st.error(f"Erro ao carregar dados do DB: {e}")
        return pd.DataFrame(), pd.DataFrame()

# Inicializa flag de recarga
if "reload_flag" not in st.session_state:
    st.session_state.reload_flag = 0

usuarios_df, atividades_df = load_data_from_db(st.session_state.reload_flag)

# ==============================
# 5. Listas fixas
# ==============================
DESCRICOES = [
    "1.001 - Gest√£o", "1.002 - Geral", "1.003 - Conselho", "1.004 - Treinamento e Desenvolvimento",
    "2.001 - Gest√£o do administrativo", "2.002 - Administrativa", "2.003 - Jur√≠dica", "2.004 - Financeira",
    "2.006 - Fiscal", "2.007 - Infraestrutura TI", "2.008 - Treinamento interno", "2.011 - An√°lise de dados",
    "2.012 - Log√≠stica de viagens", "2.013 - Presta√ß√£o de contas", "3.001 - Prospec√ß√£o de oportunidades",
    "3.002 - Prospec√ß√£o de temas", "3.003 - Administra√ß√£o comercial", "3.004 - Marketing Digital",
    "3.005 - Materiais de apoio", "3.006 - Grupos de Estudo", "3.007 - Elabora√ß√£o de POC/Piloto",
    "3.008 - Elabora√ß√£o e apresenta√ß√£o de proposta", "3.009 - Acompanhamento de proposta",
    "3.010 - Reuni√£o de acompanhamento de funil", "3.011 - Planejamento Estrat√©gico/Comercial",
    "3.012 - Sucesso do Cliente", "3.013 - Participa√ß√£o em eventos", "4.001 - Planejamento de projeto",
    "4.002 - Gest√£o de projeto", "4.003 - Reuni√µes internas de trabalho", "4.004 - Reuni√µes externas de trabalho",
    "4.005 - Pesquisa", "4.006 - Especifica√ß√£o de software", "4.007 - Desenvolvimento de software/rotinas",
    "4.008 - Coleta e prepara√ß√£o de dados", "4.009 - Elabora√ß√£o de estudos e modelos",
    "4.010 - Confec√ß√£o de relat√≥rios t√©cnicos", "4.011 - Confec√ß√£o de apresenta√ß√µes t√©cnicas",
    "4.012 - Confec√ß√£o de artigos t√©cnicos", "4.013 - Difus√£o de resultados", "4.014 - Elabora√ß√£o de documenta√ß√£o final",
    "4.015 - Finaliza√ß√£o do projeto", "5.001 - Gest√£o de desenvolvimento", "5.002 - Planejamento de projeto",
    "5.003 - Gest√£o de projeto", "5.004 - Reuni√µes internas de trabalho", "5.005 - Reuni√µes externa de trabalho",
    "5.006 - Pesquisa", "5.007 - Coleta e prepara√ß√£o de dados", "5.008 - Modelagem", "5.009 - An√°lise de tarefa",
    "5.010 - Especifica√ß√£o de tarefa", "5.011 - Corre√ß√£o de bug", "5.012 - Desenvolvimento de melhorias",
    "5.013 - Desenvolvimento de novas funcionalidades", "5.014 - Desenvolvimento de integra√ß√µes",
    "5.015 - Treinamento interno", "5.016 - Documenta√ß√£o", "5.017 - Atividades gerenciais", "5.018 - Estudos"
]

PROJETOS = [
    "101-0 (Interno) Diretoria Executiva", "102-0 (Interno) Diretoria Administrativa",
    "103-0 (Interno) Diretoria de Engenharia", "104-0 (Interno) Diretoria de Neg√≥cios",
    "105-0 (Interno) Diretoria de Produtos", "106-0 (Interno) Diretoria de Tecnologia",
    "107-0 (Interno) Departamento Administrativo", "108-0 (Interno) Departamento de Gente e Cultura",
    "109-0 (Interno) Departamento de Infraestrutura", "110-0 (Interno) Departamento de Marketing",
    "111-0 (Interno) Departamento de Opera√ß√£o", "112-0 (Interno) Departamento de Sucesso do Cliente",
    "113-0 (Interno) Produto ARIES", "114-0 (Interno) Produto ActionWise", "115-0 (Interno) Produto Carga Base"
]

# ==============================
# 6. Interface Streamlit
# ==============================
if "usuario" not in st.session_state:
    st.session_state["usuario"] = None
    st.session_state["admin"] = False

# --- Tela de Login ---
if st.session_state["usuario"] is None:
    st.title("üîê Login (PostgreSQL)")
    usuario = st.text_input("Usu√°rio")
    senha = st.text_input("Senha", type="password")
    
    if st.button("Entrar"):
        usuarios_df, atividades_df = load_data_from_db(st.session_state.reload_flag)
        ok, admin = validar_login(usuario, senha)
        if ok:
            st.session_state["usuario"] = usuario
            st.session_state["admin"] = admin
            st.experimental_rerun()
        else:
            st.error("Usu√°rio ou senha incorretos")

# --- App logado ---
else:
    st.sidebar.markdown(f"**Usu√°rio:** {st.session_state['usuario']}")
    if st.sidebar.button("Sair"):
        st.session_state["usuario"] = None
        st.session_state["admin"] = False
